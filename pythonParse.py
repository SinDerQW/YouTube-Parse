import streamlit as st
import pandas as pd
import json
import os
from googleapiclient.discovery import build
import time
import re
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(page_title="YouTube Channel Parser", page_icon="üì∫", layout="wide")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "youtube_channels.json"
API_KEYS_FILE = "api_keys.json"
API_USAGE_FILE = "api_usage.json"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
if 'api_logs' not in st.session_state:
    st.session_state.api_logs = []
if 'current_api_key' not in st.session_state:
    st.session_state.current_api_key = ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_channels():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª {DATA_FILE}.")
            return []
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_channels(channels):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(channels, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API-–∫–ª—é—á–µ–π
def load_api_keys():
    if os.path.exists(API_KEYS_FILE):
        try:
            with open(API_KEYS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return []
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API-–∫–ª—é—á–µ–π
def save_api_keys(keys):
    with open(API_KEYS_FILE, 'w', encoding='utf-8') as f:
        json.dump(keys, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
def load_api_usage():
    if os.path.exists(API_USAGE_FILE):
        try:
            with open(API_USAGE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
def save_api_usage(usage_data):
    with open(API_USAGE_FILE, 'w', encoding='utf-8') as f:
        json.dump(usage_data, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
def log_api_request(request_type, query, cost=1):
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = f"[{timestamp}] {request_type}: '{query}' (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost})"
    st.session_state.api_logs.append(log_entry)
    if len(st.session_state.api_logs) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        st.session_state.api_logs.pop(0)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_data = load_api_usage()
    today = datetime.now().strftime("%Y-%m-%d")
    key = st.session_state.current_api_key[:10] + "..." if st.session_state.current_api_key else "unknown"
    
    if key not in usage_data:
        usage_data[key] = {}
    if today not in usage_data[key]:
        usage_data[key][today] = 0
    
    usage_data[key][today] += cost
    save_api_usage(usage_data)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üì∫ YouTube Channel Parser")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å!")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
tab1, tab2, tab3 = st.tabs(["üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤", "üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", "üîë API-–∫–ª—é—á–∏"])

with tab1:
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞
    if 'stop_search' not in st.session_state:
        st.session_state.stop_search = False
    if 'channels_data' not in st.session_state:
        st.session_state.channels_data = []
    if 'search_started' not in st.session_state:
        st.session_state.search_started = False

    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
    
    # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    search_mode = st.sidebar.selectbox(
        "üîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
        ["–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞", "–ü–æ —Ç–µ–≥–∞–º –∫–∞–Ω–∞–ª–∞", "–ü–æ –≤–∏–¥–µ–æ"],
        key="search_mode",
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"
    )
    
    if search_mode == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞":
        search_input = st.sidebar.text_area(
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ |):",
            value="python|programming|coding|tech",
            key="search_input",
            help="–ü—Ä–∏–º–µ—Ä: python|programming|coding"
        )
        search_queries = [q.strip() for q in search_input.split('|') if q.strip()]
    
    elif search_mode == "–ü–æ —Ç–µ–≥–∞–º –∫–∞–Ω–∞–ª–∞":
        search_input = st.sidebar.text_area(
            "–¢–µ–≥–∏ –∫–∞–Ω–∞–ª–æ–≤ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ |):",
            value="python|programming|coding|tech",
            key="search_input_tags",
            help="–ü—Ä–∏–º–µ—Ä: python|programming|javascript"
        )
        search_queries = [q.strip() for q in search_input.split('|') if q.strip()]
    
    else:  # –ü–æ –≤–∏–¥–µ–æ
        search_input = st.sidebar.text_area(
            "–¢–µ–º—ã –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ |):",
            value="python tutorial|programming basics|coding interview",
            key="search_input_videos",
            help="–ü—Ä–∏–º–µ—Ä: python tutorial|react js|machine learning"
        )
        search_queries = [q.strip() for q in search_input.split('|') if q.strip()]

    max_results_per_query = st.sidebar.number_input(
        "–ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å (1-50):",
        min_value=1,
        max_value=50,
        value=25,
        key="max_results",
        help="–ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –º–µ–Ω—å—à–µ —Ä–∞—Å—Ö–æ–¥ –∫–≤–æ—Ç—ã API"
    )

    min_subscribers = st.sidebar.number_input(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:",
        min_value=1000,
        value=100000,
        key="min_subscribers",
        help="–¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã —Å —ç—Ç–∏–º –∏ –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –ø–æ–¥–ø–∏—â–∏–∫–æ–≤"
    )

    max_subscribers = st.sidebar.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):",
        min_value=0,
        value=0,
        key="max_subscribers",
        help="–ö–∞–Ω–∞–ª—ã —Å –Ω–µ –±–æ–ª—å—à–∏–º —ç—Ç–∏–º —á–∏—Å–ª–æ–º (0 ‚Äî –±–µ–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–∏–º–∏—Ç–∞)"
    )

    target_channels = st.sidebar.number_input(
        "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (–º–∏–Ω–∏–º—É–º):",
        min_value=10,
        max_value=500,
        value=100,
        key="target_channels",
        help="–ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤"
    )

    # –í—ã–±–æ—Ä API-–∫–ª—é—á–∞
    api_keys = load_api_keys()
    if api_keys:
        selected_key = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ API-–∫–ª—é—á:", [k['key'] for k in api_keys], key="select_key")
        api_key = next((k['key'] for k in api_keys if k['key'] == selected_key), "")
    else:
        api_key = st.sidebar.text_input(
            "YouTube API Key:",
            value="",
            type="password",
            key="api_key",
            help="–í–∞—à –∫–ª—é—á –∏–∑ Google Cloud Console"
        )

    # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_pressed = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", key="start_button")
    with col2:
        stop_pressed = st.button("–°—Ç–æ–ø", key="stop_button")

    if start_pressed:
        st.session_state.stop_search = False
        st.session_state.search_started = True
        st.session_state.channels_data = []

    if stop_pressed:
        st.session_state.stop_search = True
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if st.session_state.channels_data:
            existing_channels = load_channels()
            existing_titles = {ch.get('title', '').lower() for ch in existing_channels}
            added_count = 0
            duplicates_count = 0
            for ch in st.session_state.channels_data:
                if ch['title'].lower() not in existing_titles:
                    existing_channels.append(ch)
                    existing_titles.add(ch['title'].lower())
                    added_count += 1
                else:
                    duplicates_count += 1
            if added_count > 0:
                save_channels(existing_channels)
                st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ. –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
            else:
                st.warning(f"‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî –¥—É–±–ª–∏–∫–∞—Ç—ã ({duplicates_count}). –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
            st.session_state.channels_data = []  # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    if api_key and search_queries and st.session_state.search_started:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        st.session_state.current_api_key = api_key
        
        with st.spinner("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è (—É—á—Ç–∏—Ç–µ –∫–≤–æ—Ç—É API)"):
            try:
                youtube = build('youtube', 'v3', developerKey=api_key)
                existing_channels = load_channels()
                existing_channel_ids = {ch.get('channel_id', '') for ch in existing_channels if ch.get('channel_id')}
                existing_titles = {ch.get('title', '').lower() for ch in existing_channels}

                def get_channel_details(channel_id):
                    log_api_request("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞", f"Channel ID: {channel_id}", 1)
                    request = youtube.channels().list(part='snippet,statistics,brandingSettings', id=channel_id)
                    response = request.execute()
                    if response['items']:
                        item = response['items'][0]
                        title = item['snippet']['title']
                        description = item['snippet']['description']
                        subscribers = int(item['statistics'].get('subscriberCount', 0))
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∫–∞–Ω–∞–ª–∞
                        channel_tags = []
                        if 'brandingSettings' in item and 'channel' in item['brandingSettings']:
                            keywords = item['brandingSettings']['channel'].get('keywords', '')
                            if keywords:
                                channel_tags = [tag.strip() for tag in keywords.split(',')]
                        
                        contacts = extract_contacts(description)
                        return {
                            'title': title,
                            'channel_id': channel_id,  # –î–æ–±–∞–≤–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                            'channel_url': f"https://www.youtube.com/channel/{channel_id}",
                            'subscribers': subscribers,
                            'description': description,
                            'contacts': contacts.get('contacts', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'),
                            'viewed': False,
                            'tags': ', '.join(channel_tags) if channel_tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'
                        }
                    return None

                def extract_contacts(description):
                    contacts = {'contacts': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}
                    if description:
                        email = re.search(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', description)
                        links = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', description)
                        telegram = re.findall(r'@[\w]+', description)
                        
                        contacts_list = []
                        if email:
                            contacts_list.append(f"Email: {email.group()}")
                        if links:
                            contacts_list.extend([f"–°—Å—ã–ª–∫–∞: {link}" for link in links])
                        if telegram:
                            contacts_list.extend([f"Telegram: {t}" for t in telegram])
                        
                        if contacts_list:
                            contacts = {'contacts': '; '.join(contacts_list)}
                    return contacts

                def search_channels_by_name(queries, max_results, target):
                    current_query_index = 0
                    processed_channels = set()
                    
                    while len(st.session_state.channels_data) < target and not st.session_state.stop_search:
                        query = queries[current_query_index].strip()
                        if not query:
                            current_query_index = (current_query_index + 1) % len(queries)
                            continue
                        st.write(f"üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: '{query}' (–Ω–∞–π–¥–µ–Ω–æ: {len(st.session_state.channels_data)})")
                        
                        next_page_token = None
                        page_count = 0
                        while next_page_token is not None or page_count == 0:
                            if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                break
                            
                            log_api_request("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤", query, 100)
                            request = youtube.search().list(
                                part='snippet',
                                q=query,
                                type='channel',
                                maxResults=max_results,
                                pageToken=next_page_token
                            )
                            try:
                                response = request.execute()
                                for item in response['items']:
                                    if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                        break
                                    channel_id = item['snippet']['channelId']
                                    if channel_id not in processed_channels and channel_id not in existing_channel_ids:
                                        channel_details = get_channel_details(channel_id)
                                        if channel_details and channel_details['subscribers'] >= min_subscribers:
                                            if max_subscribers > 0 and channel_details['subscribers'] > max_subscribers:
                                                continue
                                            st.session_state.channels_data.append(channel_details)
                                            processed_channels.add(channel_id)
                                            st.write(f"‚úÖ {channel_details['title']} ({channel_details['subscribers']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
                                
                                next_page_token = response.get('nextPageToken')
                                page_count += 1
                                time.sleep(1)
                            except Exception as e:
                                if 'quotaExceeded' in str(e):
                                    st.error("‚ùå –ö–≤–æ—Ç–∞ API –∏—Å—á–µ—Ä–ø–∞–Ω–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–≤–æ—Ç—É.")
                                    return
                                else:
                                    st.error(f"–û—à–∏–±–∫–∞ API: {e}")
                                    return
                        
                        current_query_index = (current_query_index + 1) % len(queries)
                        if current_query_index == 0:
                            st.warning("–û–±—Ö–æ–¥ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            break

                def search_channels_by_tags(queries, max_results, target):
                    current_query_index = 0
                    processed_channels = set()
                    
                    while len(st.session_state.channels_data) < target and not st.session_state.stop_search:
                        query = queries[current_query_index].strip()
                        if not query:
                            current_query_index = (current_query_index + 1) % len(queries)
                            continue
                        st.write(f"üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–≥–∞–º: '{query}' (–Ω–∞–π–¥–µ–Ω–æ: {len(st.session_state.channels_data)})")
                        
                        next_page_token = None
                        page_count = 0
                        while next_page_token is not None or page_count == 0:
                            if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                break
                            
                            log_api_request("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º", query, 100)
                            request = youtube.search().list(
                                part='snippet',
                                q=query,
                                type='channel',
                                maxResults=max_results,
                                pageToken=next_page_token
                            )
                            try:
                                response = request.execute()
                                for item in response['items']:
                                    if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                        break
                                    channel_id = item['snippet']['channelId']
                                    if channel_id not in processed_channels and channel_id not in existing_channel_ids:
                                        channel_details = get_channel_details_with_tags(channel_id, query)
                                        if channel_details and channel_details['subscribers'] >= min_subscribers:
                                            if max_subscribers > 0 and channel_details['subscribers'] > max_subscribers:
                                                continue
                                            st.session_state.channels_data.append(channel_details)
                                            processed_channels.add(channel_id)
                                            st.write(f"‚úÖ {channel_details['title']} ({channel_details['subscribers']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
                                
                                next_page_token = response.get('nextPageToken')
                                page_count += 1
                                time.sleep(1)
                            except Exception as e:
                                if 'quotaExceeded' in str(e):
                                    st.error("‚ùå –ö–≤–æ—Ç–∞ API –∏—Å—á–µ—Ä–ø–∞–Ω–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–≤–æ—Ç—É.")
                                    return
                                else:
                                    st.error(f"–û—à–∏–±–∫–∞ API: {e}")
                                    return
                        
                        current_query_index = (current_query_index + 1) % len(queries)
                        if current_query_index == 0:
                            st.warning("–û–±—Ö–æ–¥ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            break

                def search_channels_by_videos(queries, max_results, target):
                    current_query_index = 0
                    processed_channels = set()
                    
                    while len(st.session_state.channels_data) < target and not st.session_state.stop_search:
                        query = queries[current_query_index].strip()
                        if not query:
                            current_query_index = (current_query_index + 1) % len(queries)
                            continue
                        st.write(f"üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ: '{query}' (–Ω–∞–π–¥–µ–Ω–æ: {len(st.session_state.channels_data)})")
                        
                        next_page_token = None
                        page_count = 0
                        while next_page_token is not None or page_count == 0:
                            if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                break
                            
                            log_api_request("–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ", query, 100)
                            request = youtube.search().list(
                                part='snippet',
                                q=query,
                                type='video',
                                maxResults=max_results,
                                pageToken=next_page_token,
                                order='relevance'
                            )
                            try:
                                response = request.execute()
                                for item in response['items']:
                                    if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                        break
                                    channel_id = item['snippet']['channelId']
                                    if channel_id not in processed_channels and channel_id not in existing_channel_ids:
                                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –≤–∏–¥–µ–æ
                                        video_tags = get_video_tags(item['id']['videoId'])
                                        channel_details = get_channel_details(channel_id)
                                        if channel_details and channel_details['subscribers'] >= min_subscribers:
                                            if max_subscribers > 0 and channel_details['subscribers'] > max_subscribers:
                                                continue
                                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏ –µ–≥–æ —Ç–µ–≥–∞—Ö
                                            channel_details['found_via_video'] = item['snippet']['title'][:80] + "..."
                                            channel_details['video_tags'] = video_tags
                                            
                                            st.session_state.channels_data.append(channel_details)
                                            processed_channels.add(channel_id)
                                            st.write(f"‚úÖ {channel_details['title']} ({channel_details['subscribers']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤) - —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ: {item['snippet']['title'][:50]}...")
                                
                                next_page_token = response.get('nextPageToken')
                                page_count += 1
                                time.sleep(1)
                            except Exception as e:
                                if 'quotaExceeded' in str(e):
                                    st.error("‚ùå –ö–≤–æ—Ç–∞ API –∏—Å—á–µ—Ä–ø–∞–Ω–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–≤–æ—Ç—É.")
                                    return
                                else:
                                    st.error(f"–û—à–∏–±–∫–∞ API: {e}")
                                    return
                        
                        current_query_index = (current_query_index + 1) % len(queries)
                        if current_query_index == 0:
                            st.warning("–û–±—Ö–æ–¥ –≤—Å–µ—Ö —Ç–µ–º –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            break

                def get_video_tags(video_id):
                    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–≥–∏ –≤–∏–¥–µ–æ"""
                    try:
                        log_api_request("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤–∏–¥–µ–æ", f"Video ID: {video_id}", 1)
                        request = youtube.videos().list(part='snippet', id=video_id)
                        response = request.execute()
                        if response['items']:
                            tags = response['items'][0]['snippet'].get('tags', [])
                            return ', '.join(tags[:10]) if tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'  # –ü–µ—Ä–≤—ã–µ 10 —Ç–µ–≥–æ–≤
                        return '–ù–µ—Ç —Ç–µ–≥–æ–≤'
                    except Exception as e:
                        return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤'

                def get_channel_details_with_tags(channel_id, search_tag):
                    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–∞–º"""
                    log_api_request("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞ —Å —Ç–µ–≥–∞–º–∏", f"Channel ID: {channel_id}", 1)
                    request = youtube.channels().list(part='snippet,statistics,brandingSettings', id=channel_id)
                    response = request.execute()
                    if response['items']:
                        item = response['items'][0]
                        title = item['snippet']['title']
                        description = item['snippet']['description']
                        subscribers = int(item['statistics'].get('subscriberCount', 0))
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∫–∞–Ω–∞–ª–∞ (keywords)
                        channel_tags = []
                        if 'brandingSettings' in item and 'channel' in item['brandingSettings']:
                            keywords = item['brandingSettings']['channel'].get('keywords', '')
                            if keywords:
                                channel_tags = [tag.strip() for tag in keywords.split(',')]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–∞–Ω–∞–ª –∏—Å–∫–æ–º—ã–π —Ç–µ–≥
                        search_tag_lower = search_tag.lower()
                        tag_match = any(search_tag_lower in tag.lower() for tag in channel_tags) or search_tag_lower in description.lower()
                        
                        if tag_match:
                            contacts = extract_contacts(description)
                            return {
                                'title': title,
                                'channel_id': channel_id,
                                'channel_url': f"https://www.youtube.com/channel/{channel_id}",
                                'subscribers': subscribers,
                                'description': description,
                                'contacts': contacts.get('contacts', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'),
                                'viewed': False,
                                'tags': ', '.join(channel_tags) if channel_tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'
                            }
                    
                    return None

                # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                if search_mode == "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞":
                    search_channels_by_name(search_queries, max_results_per_query, target_channels)
                elif search_mode == "–ü–æ —Ç–µ–≥–∞–º –∫–∞–Ω–∞–ª–∞":
                    search_channels_by_tags(search_queries, max_results_per_query, target_channels)
                else:  # –ü–æ –≤–∏–¥–µ–æ
                    search_channels_by_videos(search_queries, max_results_per_query, target_channels)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
                if st.session_state.channels_data:
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º channel_id –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    existing_channels = load_channels()
                    existing_channel_ids = {ch.get('channel_id', '') for ch in existing_channels if ch.get('channel_id')}
                    
                    added_count = 0
                    duplicates_count = 0
                    for ch in st.session_state.channels_data:
                        channel_id = ch.get('channel_id', '')
                        if channel_id and channel_id not in existing_channel_ids:
                            existing_channels.append(ch)
                            existing_channel_ids.add(channel_id)
                            added_count += 1
                        else:
                            duplicates_count += 1

                    if added_count > 0:
                        save_channels(existing_channels)
                        st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
                    else:
                        st.warning(f"‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî –¥—É–±–ª–∏–∫–∞—Ç—ã ({duplicates_count}). –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    df_new = pd.DataFrame(st.session_state.channels_data)
                    st.subheader("–ù–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
                    st.dataframe(df_new, use_container_width=True)
                    
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV –Ω–æ–≤—ã—Ö
                    csv_new = df_new.to_csv(index=False, encoding='utf-8')
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ CSV",
                        data=csv_new,
                        file_name=f'new_youtube_channels_{added_count}.csv',
                        mime='text/csv'
                    )
                    st.session_state.channels_data = []  # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                else:
                    st.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –º–∏–Ω. –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

            except Exception as e:
                st.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –ö–æ–Ω—Å–æ–ª—å —Å –ª–æ–≥–∞–º–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
    if st.session_state.api_logs:
        with st.expander("üìä –ö–æ–Ω—Å–æ–ª—å API –∑–∞–ø—Ä–æ—Å–æ–≤", expanded=False):
            st.text_area("–õ–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤:", value='\n'.join(st.session_state.api_logs[-20:]), height=200, disabled=True)
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", key="clear_log"):
                st.session_state.api_logs = []
                st.rerun()

with tab2:
    st.header("üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
    
    existing_channels = load_channels()
    
    if existing_channels:
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        st.markdown("### üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –º–∞–∫–µ—Ç–µ
        button_col1, button_col2, button_col3, stats_col = st.columns([1.5, 1.5, 1.5, 2])
        
        with button_col1:
            refresh_button = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="refresh_button", use_container_width=True)
        with button_col2:
            save_button = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key="save_button", use_container_width=True, type="primary")
        with button_col3:
            delete_button = st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", key="delete_button", use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
        with stats_col:
            df = pd.DataFrame(existing_channels)
            viewed_count = df.get('viewed', pd.Series([False] * len(df))).sum()
            total_count = len(df)
            st.metric("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{viewed_count}/{total_count} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ")

        st.divider()  # –ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

        if refresh_button:
            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ–∫–±–æ–∫—Å)
        df['delete'] = False
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º –¥–ª—è "viewed", "delete" –∏ —Å—Å—ã–ª–∫–æ–π
        st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤")
        edited_df = st.data_editor(
            df,
            column_config={
                "channel_url": st.column_config.LinkColumn(
                    "üîó –°—Å—ã–ª–∫–∞",
                    display_text="–ü–µ—Ä–µ–π—Ç–∏",
                    help="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è YouTube-–∫–∞–Ω–∞–ª–∞"
                ),
                "viewed": st.column_config.CheckboxColumn(
                    "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ",
                    default=False,
                    required=False
                ),
                "delete": st.column_config.CheckboxColumn(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å",
                    default=False,
                    required=False
                ),
                "title": st.column_config.TextColumn("üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ", width="medium"),
                "subscribers": st.column_config.NumberColumn("üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", format="%d"),
                "description": st.column_config.TextColumn("üìù –û–ø–∏—Å–∞–Ω–∏–µ", width="large"),
                "contacts": st.column_config.TextColumn("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", width="medium"),
                "tags": st.column_config.TextColumn("üè∑Ô∏è –¢–µ–≥–∏", width="medium"),
                "found_via_video": st.column_config.TextColumn("üìπ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ", width="medium"),
                "video_tags": st.column_config.TextColumn("üé¨ –¢–µ–≥–∏ –≤–∏–¥–µ–æ", width="medium")
            },
            use_container_width=True,
            hide_index=False,
            column_order=["title", "channel_url", "subscribers", "viewed", "delete", "description", "contacts", "tags", "found_via_video", "video_tags"]
        )
        
        # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if save_button:
            updated_df = edited_df.drop(columns=['delete'])
            updated_channels = updated_df.to_dict('records')
            save_channels(updated_channels)
            st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
        
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if delete_button:
            to_delete = edited_df[edited_df['delete'] == True]
            if not to_delete.empty:
                updated_df = edited_df[~edited_df['delete']].drop(columns=['delete'])
                updated_channels = updated_df.to_dict('records')
                save_channels(updated_channels)
                st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(to_delete)} –∫–∞–Ω–∞–ª–æ–≤!")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ CSV
        st.markdown("### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        csv_full = edited_df.drop(columns=['delete']).to_csv(index=False, encoding='utf-8')
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã (CSV)",
            data=csv_full,
            file_name=f'youtube_channels_{total_count}_records.csv',
            mime='text/csv',
            use_container_width=True
        )
        
    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ!")

with tab3:
    st.header("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API-–∫–ª—é—á–∞–º–∏")
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á")
    
    add_col1, add_col2, add_col3 = st.columns([2, 2, 1])
    with add_col1:
        new_key = st.text_input("üîë API-–∫–ª—é—á:", type="password", key="new_key_input", placeholder="–í–≤–µ–¥–∏—Ç–µ YouTube API –∫–ª—é—á")
    with add_col2:
        new_key_name = st.text_input("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:", key="new_key_name", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á")
    with add_col3:
        st.markdown("<br>", unsafe_allow_html=True)  # –û—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        add_key_button = st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", key="add_key_button", use_container_width=True, type="primary")
    
    if add_key_button:
        if new_key:
            api_keys = load_api_keys()
            api_keys.append({"name": new_key_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", "key": new_key})
            save_api_keys(api_keys)
            st.success("‚úÖ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ API-–∫–ª—é—á!")
    
    st.divider()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏
    api_keys = load_api_keys()
    
    if api_keys:
        st.markdown("### üìã –°–ø–∏—Å–æ–∫ API-–∫–ª—é—á–µ–π")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
        manage_col1, manage_col2, stats_col = st.columns([1.5, 1.5, 2])
        
        with manage_col1:
            save_changes_button = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="save_changes_keys", use_container_width=True, type="primary")
        with manage_col2:
            delete_selected_keys = st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", key="delete_selected_keys", use_container_width=True)
        with stats_col:
            st.metric("üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π", len(api_keys))
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
        usage_data = load_api_usage()
        if usage_data:
            usage_df = []
            for key_short, dates in usage_data.items():
                for date, requests in dates.items():
                    usage_df.append({
                        'API –∫–ª—é—á': key_short,
                        '–î–∞—Ç–∞': date,
                        '–ó–∞–ø—Ä–æ—Å–æ–≤': requests,
                        '–ö–≤–æ—Ç–∞ %': f"{min(100, (requests/10000)*100):.1f}%"
                    })
            
            if usage_df:
                df_usage = pd.DataFrame(usage_df)
                st.dataframe(df_usage, use_container_width=True, hide_index=True)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now().strftime("%Y-%m-%d")
                today_usage = sum(dates.get(today, 0) for dates in usage_data.values())
                
                col_usage1, col_usage2, col_usage3 = st.columns(3)
                with col_usage1:
                    st.metric("üìÖ –°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", today_usage)
                with col_usage2:
                    st.metric("üîã –û—Å—Ç–∞–ª–æ—Å—å –∫–≤–æ—Ç—ã", max(0, 10000 - today_usage))
                with col_usage3:
                    quota_percent = min(100, (today_usage/10000)*100)
                    st.metric("üìä –ö–≤–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞", f"{quota_percent:.1f}%")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API")
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keys_df = pd.DataFrame(api_keys)
        keys_df['delete'] = False
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–π
        edited_keys_df = st.data_editor(
            keys_df,
            column_config={
                "name": st.column_config.TextColumn("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ", width="medium"),
                "key": st.column_config.TextColumn("üîë API-–∫–ª—é—á", width="large"),
                "delete": st.column_config.CheckboxColumn("‚ùå –£–¥–∞–ª–∏—Ç—å", default=False)
            },
            use_container_width=True,
            hide_index=True,
            column_order=["name", "key", "delete"]
        )
        
        # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–ª—é—á–µ–π
        if save_changes_button:
            updated_keys_df = edited_keys_df.drop(columns=['delete'])
            updated_keys = updated_keys_df.to_dict('records')
            save_api_keys(updated_keys)
            st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ API-–∫–ª—é—á–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
        
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        if delete_selected_keys:
            keys_to_delete = edited_keys_df[edited_keys_df['delete'] == True]
            if not keys_to_delete.empty:
                remaining_keys_df = edited_keys_df[~edited_keys_df['delete']].drop(columns=['delete'])
                remaining_keys = remaining_keys_df.to_dict('records')
                save_api_keys(remaining_keys)
                st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(keys_to_delete)} API-–∫–ª—é—á–µ–π!")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–ª—é—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        
    else:
        st.info("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö API-–∫–ª—é—á–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"):
    st.markdown("""
    1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Streamlit –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:  
       `pip install streamlit google-api-python-client pandas`
    2. **–ó–∞–ø—É—Å–∫**: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ –≤ —Ñ–∞–π–ª `app.py` –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:  
       `streamlit run app.py`
    3. **API-–∫–ª—é—á**: –ü–æ–ª—É—á–∏—Ç–µ –≤ [Google Cloud Console](https://console.cloud.google.com/) (–≤–∫–ª—é—á–∏—Ç–µ YouTube Data API v3).
    4. **–ö–≤–æ—Ç–∞**: –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç 10k –µ–¥–∏–Ω–∏—Ü/–¥–µ–Ω—å. –î–ª—è –±–æ–ª—å—à–µ–≥–æ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ.
    5. **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ**: –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ `youtube_channels.json`. –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    6. **–õ–æ–∫–∞–ª—å–Ω–æ**: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ (localhost:8501), –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞.
    """)