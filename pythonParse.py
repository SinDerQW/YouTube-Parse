import streamlit as st
import pandas as pd
import json
import os
from googleapiclient.discovery import build
import time
import re
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(page_title="YouTube Channel Parser", page_icon="üì∫", layout="wide")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "youtube_channels.json"
API_KEYS_FILE = "api_keys.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_channels():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª {DATA_FILE}.")
            return []
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_channels(channels):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(channels, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API-–∫–ª—é—á–µ–π
def load_api_keys():
    if os.path.exists(API_KEYS_FILE):
        try:
            with open(API_KEYS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return []
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API-–∫–ª—é—á–µ–π
def save_api_keys(keys):
    with open(API_KEYS_FILE, 'w', encoding='utf-8') as f:
        json.dump(keys, f, ensure_ascii=False, indent=2)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üì∫ YouTube Channel Parser")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å!")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
tab1, tab2, tab3 = st.tabs(["üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤", "üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", "üîë API-–∫–ª—é—á–∏"])

with tab1:
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞
    if 'stop_search' not in st.session_state:
        st.session_state.stop_search = False
    if 'channels_data' not in st.session_state:
        st.session_state.channels_data = []
    if 'search_started' not in st.session_state:
        st.session_state.search_started = False

    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
    search_input = st.sidebar.text_area(
        "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        value="python,programming,coding,tech",
        key="search_input",
        help="–ü—Ä–∏–º–µ—Ä: python,programming"
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞: —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –Ω–æ–≤—ã–º —Å—Ç—Ä–æ–∫–∞–º
    search_queries = [q.strip() for q in search_input.replace(',', '\n').splitlines() if q.strip()]

    max_results_per_query = st.sidebar.number_input(
        "–ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å (1-50):",
        min_value=1,
        max_value=50,
        value=25,
        key="max_results",
        help="–ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –º–µ–Ω—å—à–µ —Ä–∞—Å—Ö–æ–¥ –∫–≤–æ—Ç—ã API"
    )

    min_subscribers = st.sidebar.number_input(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:",
        min_value=1000,
        value=100000,
        key="min_subscribers",
        help="–¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã —Å —ç—Ç–∏–º –∏ –±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –ø–æ–¥–ø–∏—â–∏–∫–æ–≤"
    )

    max_subscribers = st.sidebar.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):",
        min_value=0,
        value=0,
        key="max_subscribers",
        help="–ö–∞–Ω–∞–ª—ã —Å –Ω–µ –±–æ–ª—å—à–∏–º —ç—Ç–∏–º —á–∏—Å–ª–æ–º (0 ‚Äî –±–µ–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–∏–º–∏—Ç–∞)"
    )

    target_channels = st.sidebar.number_input(
        "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (–º–∏–Ω–∏–º—É–º):",
        min_value=10,
        max_value=500,
        value=100,
        key="target_channels",
        help="–ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤"
    )

    # –í—ã–±–æ—Ä API-–∫–ª—é—á–∞
    api_keys = load_api_keys()
    if api_keys:
        selected_key = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ API-–∫–ª—é—á:", [k['key'] for k in api_keys], key="select_key")
        api_key = next((k['key'] for k in api_keys if k['key'] == selected_key), "")
    else:
        api_key = st.sidebar.text_input(
            "YouTube API Key:",
            value="",
            type="password",
            key="api_key",
            help="–í–∞—à –∫–ª—é—á –∏–∑ Google Cloud Console"
        )

    # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_pressed = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", key="start_button")
    with col2:
        stop_pressed = st.button("–°—Ç–æ–ø", key="stop_button")

    if start_pressed:
        st.session_state.stop_search = False
        st.session_state.search_started = True
        st.session_state.channels_data = []

    if stop_pressed:
        st.session_state.stop_search = True
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if st.session_state.channels_data:
            existing_channels = load_channels()
            existing_titles = {ch.get('title', '').lower() for ch in existing_channels}
            added_count = 0
            duplicates_count = 0
            for ch in st.session_state.channels_data:
                if ch['title'].lower() not in existing_titles:
                    existing_channels.append(ch)
                    existing_titles.add(ch['title'].lower())
                    added_count += 1
                else:
                    duplicates_count += 1
            if added_count > 0:
                save_channels(existing_channels)
                st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ. –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
            else:
                st.warning(f"‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî –¥—É–±–ª–∏–∫–∞—Ç—ã ({duplicates_count}). –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
            st.session_state.channels_data = []  # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    if api_key and search_queries and st.session_state.search_started:
        with st.spinner("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è (—É—á—Ç–∏—Ç–µ –∫–≤–æ—Ç—É API)"):
            try:
                youtube = build('youtube', 'v3', developerKey=api_key)
                existing_channels = load_channels()
                existing_titles = {ch.get('title', '').lower() for ch in existing_channels}

                def get_channel_details(channel_id):
                    request = youtube.channels().list(part='snippet,statistics', id=channel_id)
                    response = request.execute()
                    if response['items']:
                        item = response['items'][0]
                        title = item['snippet']['title']
                        description = item['snippet']['description']
                        subscribers = int(item['statistics'].get('subscriberCount', 0))
                        contacts = extract_contacts(description)
                        return {
                            'title': title,
                            'channel_url': f"https://www.youtube.com/channel/{channel_id}",
                            'subscribers': subscribers,
                            'description': description,
                            'contacts': contacts.get('contacts', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'),
                            'viewed': False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ
                        }
                    return None

                def extract_contacts(description):
                    contacts = {'contacts': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}
                    if description:
                        email = re.search(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', description)
                        links = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', description)
                        telegram = re.findall(r'@[\w]+', description)
                        
                        contacts_list = []
                        if email:
                            contacts_list.append(f"Email: {email.group()}")
                        if links:
                            contacts_list.extend([f"–°—Å—ã–ª–∫–∞: {link}" for link in links])
                        if telegram:
                            contacts_list.extend([f"Telegram: {t}" for t in telegram])
                        
                        if contacts_list:
                            contacts = {'contacts': '; '.join(contacts_list)}
                    return contacts

                def search_channels(queries, max_results, target):
                    current_query_index = 0
                    while len(st.session_state.channels_data) < target and not st.session_state.stop_search:
                        query = queries[current_query_index].strip()
                        if not query:
                            current_query_index = (current_query_index + 1) % len(queries)
                            continue
                        st.write(f"üîç –ü–æ–∏—Å–∫ –ø–æ: '{query}' (–Ω–∞–π–¥–µ–Ω–æ: {len(st.session_state.channels_data)})")
                        
                        next_page_token = None
                        page_count = 0
                        while next_page_token is not None or page_count == 0:
                            if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                break
                            request = youtube.search().list(
                                part='snippet',
                                q=query,
                                type='channel',
                                maxResults=max_results,
                                pageToken=next_page_token
                            )
                            try:
                                response = request.execute()
                                for item in response['items']:
                                    if len(st.session_state.channels_data) >= target or st.session_state.stop_search:
                                        break
                                    channel_id = item['snippet']['channelId']
                                    channel_details = get_channel_details(channel_id)
                                    if channel_details and channel_details['subscribers'] >= min_subscribers:
                                        if max_subscribers > 0 and channel_details['subscribers'] > max_subscribers:
                                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º
                                        if channel_details['title'].lower() not in existing_titles:
                                            st.session_state.channels_data.append(channel_details)
                                            st.write(f"‚úÖ {channel_details['title']} ({channel_details['subscribers']} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
                                
                                next_page_token = response.get('nextPageToken')
                                page_count += 1
                                time.sleep(1)
                            except Exception as e:
                                if 'quotaExceeded' in str(e):
                                    st.error("‚ùå –ö–≤–æ—Ç–∞ API –∏—Å—á–µ—Ä–ø–∞–Ω–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–≤–æ—Ç—É.")
                                    return
                                else:
                                    st.error(f"–û—à–∏–±–∫–∞ API: {e}")
                                    return
                        
                        current_query_index = (current_query_index + 1) % len(queries)
                        if current_query_index == 0:
                            st.warning("–û–±—Ö–æ–¥ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            break

                search_channels(search_queries, max_results_per_query, target_channels)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
                if st.session_state.channels_data:
                    added_count = 0
                    duplicates_count = 0
                    for ch in st.session_state.channels_data:
                        if ch['title'].lower() not in existing_titles:
                            existing_channels.append(ch)
                            existing_titles.add(ch['title'].lower())
                            added_count += 1
                        else:
                            duplicates_count += 1

                    if added_count > 0:
                        save_channels(existing_channels)
                        st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")
                    else:
                        st.warning(f"‚ö†Ô∏è –í—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî –¥—É–±–ª–∏–∫–∞—Ç—ã ({duplicates_count}). –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    df_new = pd.DataFrame(st.session_state.channels_data)
                    st.subheader("–ù–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
                    st.dataframe(df_new, use_container_width=True)
                    
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV –Ω–æ–≤—ã—Ö
                    csv_new = df_new.to_csv(index=False, encoding='utf-8')
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ CSV",
                        data=csv_new,
                        file_name=f'new_youtube_channels_{added_count}.csv',
                        mime='text/csv'
                    )
                    st.session_state.channels_data = []  # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                else:
                    st.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –º–∏–Ω. –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

            except Exception as e:
                st.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

with tab2:
    st.header("üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ
    col1, col2, col3 = st.columns(3)
    with col1:
        refresh_button = st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="refresh_button")
    with col2:
        save_button = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="save_button")
    with col3:
        delete_button = st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", key="delete_button")

    if refresh_button:
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    existing_channels = load_channels()
    if existing_channels:
        df = pd.DataFrame(existing_channels)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ–∫–±–æ–∫—Å)
        df['delete'] = False
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º –¥–ª—è "viewed", "delete" –∏ —Å—Å—ã–ª–∫–æ–π
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        edited_df = st.data_editor(
            df,
            column_config={
                "channel_url": st.column_config.LinkColumn(
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
                    display_text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª",
                    help="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è YouTube-–∫–∞–Ω–∞–ª–∞"
                ),
                "viewed": st.column_config.CheckboxColumn(
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ",
                    default=False,
                    required=False
                ),
                "delete": st.column_config.CheckboxColumn(
                    "–£–¥–∞–ª–∏—Ç—å?",
                    default=False,
                    required=False
                )
            },
            use_container_width=True,
            hide_index=False,
            column_order=["title", "channel_url", "subscribers", "viewed", "delete", "description", "contacts"]
        )
        
        # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if save_button:
            updated_df = edited_df.drop(columns=['delete'])
            updated_channels = updated_df.to_dict('records')
            save_channels(updated_channels)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
        
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if delete_button:
            to_delete = edited_df[edited_df['delete'] == True]
            if not to_delete.empty:
                updated_df = edited_df[~edited_df['delete']].drop(columns=['delete'])
                updated_channels = updated_df.to_dict('records')
                save_channels(updated_channels)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(to_delete)} —Å—Ç—Ä–æ–∫!")
                st.rerun()
            else:
                st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        
    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ!")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    viewed_count = edited_df['viewed'].sum() if 'viewed' in edited_df.columns else 0
    total_count = len(edited_df) if 'edited_df' in locals() else 0
    st.metric("–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤", total_count)
    st.metric("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", viewed_count)
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ CSV
    csv_full = edited_df.drop(columns=['delete']).to_csv(index=False, encoding='utf-8') if 'edited_df' in locals() else ""
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ CSV",
        data=csv_full,
        file_name=f'all_youtube_channels_{total_count}.csv',
        mime='text/csv',
        disabled=not existing_channels
    )

with tab3:
    st.header("üîë API-–∫–ª—é—á–∏")
    api_keys = load_api_keys()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    new_key = st.text_input("–ù–æ–≤—ã–π API-–∫–ª—é—á:", type="password", key="new_key_input")
    new_key_name = st.text_input("–ò–º—è –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", key="new_key_name")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á"):
        if new_key:
            api_keys.append({"name": new_key_name or "–ë–µ–∑ –∏–º–µ–Ω–∏", "key": new_key})
            save_api_keys(api_keys)
            st.success("–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω!")
            st.rerun()
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á!")
    
    # –¢–∞–±–ª–∏—Ü–∞ API-–∫–ª—é—á–µ–π
    if api_keys:
        st.subheader("–°–ø–∏—Å–æ–∫ API-–∫–ª—é—á–µ–π")
        edited_keys = st.data_editor(
            api_keys,
            column_config={
                "name": "–ò–º—è",
                "key": st.column_config.TextColumn("–ö–ª—é—á", help="–°–∫—Ä—ã—Ç–∞—è —á–∞—Å—Ç—å –∫–ª—é—á–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ ...")
            },
            use_container_width=True,
            hide_index=True
        )
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            save_api_keys(edited_keys)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
        
    else:
        st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!")

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"):
    st.markdown("""
    1. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Streamlit –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:  
       `pip install streamlit google-api-python-client pandas`
    2. **–ó–∞–ø—É—Å–∫**: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ –≤ —Ñ–∞–π–ª `app.py` –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:  
       `streamlit run app.py`
    3. **API-–∫–ª—é—á**: –ü–æ–ª—É—á–∏—Ç–µ –≤ [Google Cloud Console](https://console.cloud.google.com/) (–≤–∫–ª—é—á–∏—Ç–µ YouTube Data API v3).
    4. **–ö–≤–æ—Ç–∞**: –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç 10k –µ–¥–∏–Ω–∏—Ü/–¥–µ–Ω—å. –î–ª—è –±–æ–ª—å—à–µ–≥–æ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ.
    5. **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ**: –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ `youtube_channels.json`. –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    6. **–õ–æ–∫–∞–ª—å–Ω–æ**: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ (localhost:8501), –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞.
    """)